group 'com.zibto'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}
repositories {
    mavenLocal()
    mavenCentral()
}
compileJava.options.encoding = "UTF-8"

//apply plugin: 'javafx-gradle-plugin'
apply plugin: 'javafx-gradle-plugin'

jfx {
    // minimal requirement for jfxJar-task
    mainClass = 'ui.Main'

    // minimal requirement for jfxNative-task
    vendor = 'zibto'
    appName = 'DGen'
    jfxMainAppJarName = "DGen.jar"
    deployDir = "src/main/deploy"

    verbose = true
    jfxAppOutputDir = "build/jfx/app"
    useEnvironmentRelativeExecutables = true
    libFolderName = "lib"

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false
    skipCopyingDependencies = false
    useLibFolderContentForManifestClasspath = false
    fixedManifestClasspath = null

    // gradle jfxNative
    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "some serious business corp."
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = "1.0"
    needShortcut = false
    needMenu = false
    bundleArguments = [
            // dont bundle JRE (not recommended, but increases build-size/-speed)
            runtime: null
    ]
    appName = "project" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/package/windows/project.ico"
    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null // path to some additional resources when creating application-bundle
    secondaryLaunchers = [[appName:"somethingDifferent"], [appName:"somethingDifferent2"]]
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    failOnError = false
    onlyCustomBundlers = false
    skipJNLP = false
    skipNativeVersionNumberSanitizing = false // anything than numbers or dots are removed
    additionalJarsignerParameters = null // List<String>
    skipMainClassScanning = false // set to true might increase build-speed

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipNativeLauncherWorkaround205 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false
    skipMacBundlerWorkaround = false

    // gradle jfxRun
    runJavaParameter = null // String
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String

    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = true

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}
ext {
    //dependencies
    apachePoiVersion = '3.17'
    ormliteVersion = '5.1'
    sqliteJdbcVersion = '3.21.0.1'
    springVersion = '5.0.5.RELEASE'
    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    log4j = '2.11.0'
    controlsfx = '8.0.1'
}

dependencies {
    // Java API To Access Microsoft Format Files
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    compile group: 'org.apache.poi', name: 'poi', version: apachePoiVersion
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: apachePoiVersion

    // High quality UI controls and other tools to complement the core JavaFX distribution
    // https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    compile group: 'org.controlsfx', name: 'controlsfx', version: controlsfx

    // Spring Context
    // https://mvnrepository.com/artifact/org.springframework/spring-context
    compile group: 'org.springframework', name: 'spring-context', version: springVersion

    // Lightweight Object Relational Model (ORM) for persisting objects to SQL databases.
    // https://mvnrepository.com/artifact/com.j256.ormlite/ormlite-core
    compile group: 'com.j256.ormlite', name: 'ormlite-core', version: ormliteVersion
    compile group: 'com.j256.ormlite', name: 'ormlite-jdbc', version: ormliteVersion

    // SQLite JDBC library
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: sqliteJdbcVersion

    // The Apache Log4j Implementation
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j

    // The Apache Log4j API
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j

    // Spring TestContext Framework
    // https://mvnrepository.com/artifact/org.springframework/spring-test
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion

    // JUnit is a unit testing framework for Java
    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: junitVersion

    // Mock objects library for java
    // https://mvnrepository.com/artifact/org.mockito/mockito-all
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
}